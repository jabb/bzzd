{"body":"### A Drunk Introduction\r\nIf you're looking to procedurally generate 2D maps, libdrunkard may be what you're looking for. This library uses a fine tuned drunkard's walk alogirithm (see: http://en.wikipedia.org/wiki/Random_walk). Basically, you'll have a walker (or a drunk, as this library calls it) who walks around the map carving tunnels and various other structures.\r\n\r\nHere's a good example of what you can create (quite simply too!):\r\n\r\n![libdrunkard](http://dl.dropbox.com/u/11665683/drunkard1.png)\r\n\r\n### Compiling Drunkard\r\n\r\nOn most systems, you can simply do `make && make install` to get the library working on your computer. The library itself is very small, 57kb with debugging enabled.\r\n\r\nIf the libdrunkard fails to compile on your system, feel free to contact me at my GitHub: @jabb.\r\n\r\n### Using Drunkard\r\n\r\nIn order to use libdrunkard, all you need to do is include the header file `<dunkard.h>` and link against the library by passing `-ldrunkard` to GCC, or some other compiler. After that you need to have your map already defined and then you can create your drunk. The map needs to be an array or multidimensional array of unsigned numbers, if multidimensional, height must be indexed first, like below:\r\n\r\n```\r\nunsigned map[MAP_HEIGHT][MAP_WIDTH] = {{0}};\r\n/* Create the drunk. */\r\nstruct drunkard *drunk = drunkard_create((void *)map, MAP_WIDTH, MAP_HEIGHT);\r\n\r\n/* Carve out a random map. */\r\n/* ... */\r\n\r\n/* Destroy the drunk. */\r\ndrunkard_destroy(drunk);\r\n```\r\n\r\nSome technical notes:\r\n\r\n* libdrunkard uses it's own custom random number generator (CMWC) which is seeded automatically. You can get the current seed with `drunkard_get_seed` and set it manually with `drunkard_seed`.\r\n* libdrunkard recognizes numbers passing a certain threshold as open (walkable) tiles. This threshold can be set manually with `drunkard_set_opened_threshold`. The default is 1, so only a tile that has the value of 0 can't be walked upon.\r\n* libdrunkard keeps a list of tiles that have been opened and tiles that might be opened after a flush, the latter are called marks. \"Marking\" tiles is the preferable way to set tiles during a carving process, that way any tiles that open up don't confuse the drunkard thinking he's found the main tunnel system. There are various marking functions, but only one way to flush them: `drunkard_flush_marks`. Flush only when you're absolutely sure you've connected with the rest of your walkable area, or you know you can get back to the disconnected area.\r\n* libdrunkard's marks tiles only relative to the current position and target of the drunk. When you're carving, at some point you should **always** target a random open tile and head towards it. There are always exceptions of course, but this is a good rule so you can be sure your drunk connects to a walkable area.\r\n* libdrunkard's main stepping function uses a weight to calculate how stumbly the drunk will be. The weight is on a scale from 0.0 to 1.0. A value of 0.0 means the drunk will move directly away from his target, a value of 1.0 will mean directory towards, and a value of 0.5 means he'll just randomly walk around. I like values between 0.6 and 0.9 to be sure the drunk reaches his target.\r\n\r\n### Function Documentation\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Drunkard's Walk 2D Map Generator","google":"","name":"libdrunkard"}